//Knapsack problem 0 1
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int knapsack(int *weights,int* values,int n,int maxweight,int i,int j)
{
    //Base case
    if(maxweight<=0)
    {
        return 0;
    }
    if(i>j)
    {
        return 0;
    }
    //Recursive calls
    int a=INT_MIN;
    int b=INT_MIN;
    if(weights[i]<=maxweight)
    {
        //1st element chosen
    a=values[i]+knapsack(weights,values,n-1,maxweight-weights[i],i+1,j);
    }
    //1st element not chosen
    b=knapsack(weights,values,n,maxweight,i+1,j);
    return(max(a,b));
}
//Or can do like without taking i and j just pass weight +1 and value+1
int knapsack2(int *weights,int *values,int n,int maxweight)
{
    if(n==0)
    {
        return 0;
    }
    if(maxweight==0)
    {
        return 0;
    }
    //Recursive calls
    int a=INT_MIN;
    int b=INT_MIN;
    if(weights[0]<=maxweight)
    {
        //1st element chosen
    a=values[0]+knapsack2(weights+1,values+1,n-1,maxweight-weights[0]);
    }
    //1st element not chosen
    b=knapsack2(weights+1,values+1,n-1,maxweight);
    return(max(a,b));
}

int main()
{
    int n,maxweight;
    cin>>n;
    int *weights=new int[n];
    int*values=new int[n];
    for(int i=0;i<n;i++)
    {
        cin>>weights[i];
    }
    for(int i=0;i<n;i++)
    {
        cin>>values[i];
    }
    cin>>maxweight;
  cout<<knapsack(weights,values,n,maxweight,0,n-1)<<endl;  
  cout<<knapsack2(weights,values,n,maxweight);

}
