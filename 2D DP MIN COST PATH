#include <iostream>
#include<bits/stdc++.h>
using namespace std;
//Normal Recursive solution
int minCostNormal(int m,int n,int **answer,int i,int j)
{
    if(i>=m||j>=n)
    {
        return INT_MAX;
    }
    if(i==m-1&&j==n-1)
    {
        return answer[i][j];
    }
    int x=minCostNormal(m,n,answer,i+1,j);
    int y=minCostNormal(m,n,answer,i,j+1);
    int z=minCostNormal(m,n,answer,i+1,j+1);
    return min(x,min(y,z))+answer[i][j];
}
int minCostMemo(int m,int n,int **answer,int i,int j,int **answerMemo)
{
      if(i>=m||j>=n)
    {
        return INT_MAX;
    }
    if(i==m-1&&j==n-1)
    {
        return answer[i][j];
    }
    //Check if answer already exists 
    if(answerMemo[i][j]!=-1)
    {
        return answerMemo[i][j];
    }
    int x,y,z;
    //No need to check for i+1,j as upar already check ho jaega.
    x=minCostNormal(m,n,answer,i+1,j); 
    //No need to save x in answer[i+1][j] as save ho jaega last mei 
    y=minCostNormal(m,n,answer,i,j+1);
    z=minCostNormal(m,n,answer,i+1,j+1);
    answerMemo[i][j]=min(x,min(y,z))+answer[i][j];
    return answerMemo[i][j];
}
int minCostHelp(int m,int n,int **answer,int i,int j)
{
    int **answerMemo=new int*[n];
    for(int i=0;i<n;i++)
    {
        answerMemo[i]=new int[m];
    }
     for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
           answerMemo[i][j]=-1;
        }
    }
    return minCostMemo(m,n,answer,i,j,answerMemo);
    
}
int minCost(int m,int n,int **answer,int **answerDp)
{
    answerDp[m-1][n-1]=answer[m-1][n-1];
    //answerDp[i][j] would contain minimum cost from [0][0] to reach that [i][j].
        int i=m-1;
        //Filling last  row
        for(int j=n-2;j>=0;j--)
        {
            answerDp[i][j]=answerDp[i][j+1]+answer[i][j];
        }
        //Filling last column
         int j=n-1;
        for(int i=m-2;i>=0;i--)
        {
            answerDp[i][j]=answerDp[i+1][j]+answer[i][j];
        }
        for(int i=m-2;i>=0;i--)
        {
            for(int j=n-2;j>=0;j--)
            {
                answerDp[i][j]=min(answerDp[i+1][j],min(answerDp[i+1][j+1],answerDp[i][j+1]))+answer[i][j];
            }
        }
   return answerDp[0][0];
}
int main() 
{
    int m,n;
    cin>>m>>n;
    int **answer=new int*[n];
    for(int i=0;i<n;i++)
    {
        answer[i]=new int[m];
    }
     for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>answer[i][j];
        }
    } 
     int **answerDp=new int*[n];
    for(int i=0;i<n;i++)
    {
        answerDp[i]=new int[m];
    }
     for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            answerDp[i][j]=-1;
        }
    }
    cout<<minCost(m,n,answer,answerDp)<<endl;
    cout<<minCostHelp(m,n,answer,0,0)<<endl;
    cout<<minCostNormal(m,n,answer,0,0)<<endl;
}
