//Minimum steps to reach 1.
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int minsteps(int n)
{
    if(n==1)
    {
        return 0;
    }
    int a=INT_MAX;
    int b=INT_MAX;
    int c;
    if(n%3==0)
    {
        a=minsteps(n/3);
    }
    if(n%2==0)
    {
        b=minsteps(n/2);
    }
    c=minsteps(n-1);
    return min(a,min(b,c))+1;
}
int minstepsMemo(int n,int *answer)
{
    if(n<=1)
    {
        answer[n]=0;
        return answer[n];
    }
    int a=INT_MAX;
    int b=INT_MAX;
    int c;
    if(n%3==0)
    {   
        if(answer[n/3]!=-1)
        {
            a=answer[n/3];
        }
        else
        {
        a=minsteps(n/3);
        }
    }
    if(n%2==0)
    {
         if(answer[n/2]!=-1)
        {
            b=answer[n/2];
        }
        else
        {
        b=minsteps(n/2);
        }
    }
    if(answer[n-1]!=-1)
    {
        c=answer[n-1];
    }
    else
    {
    c=minsteps(n-1);
    }
    answer[n]=min(a,min(b,c))+1;
    return answer[n];
}
int minstepsMemoHelper(int n)
{
    int *answer=new int[n+1];
    for(int i=0;i<=n;i++)
    {
        answer[i]=-1;
    }
    return minstepsMemo(n,answer);
}
int minstepsDp(int n)
{
    int *ans=new int[n+1];
    ans[0]=0;
    ans[1]=0;
    ans[2]=1;
    ans[3]=1;
    int a=INT_MAX;
    int b=INT_MAX;
    int c=INT_MAX;
    for(int i=4;i<=n;i++)
    {
        if(i%3==0)
        {
            a=ans[i/3];
        }
        if(i%2==0)
        {
            b=ans[i/2];
        }
        c=ans[i-1];
        
        ans[i]=1+min(a,min(b,c));
        a=INT_MAX;
        b=INT_MAX;
        c=INT_MAX;
    }
    return ans[n];
}
int main() {
    int n;
    cin>>n;
    cout<<minstepsDp(n)<<endl;
    cout<<minsteps(n)<<endl;
    cout<<minstepsMemoHelper(n);
}
