int solve2(string s,string v,int **answer)
{
	// Write your code here.
     //Base case
     //Base case
    if(s.length()==0)
    {
        //S length zero so ab s only has 1 subsequence which is empty so that is present in v as well so no subsequence exist as such
        return 1000;
    }
    if(v.length()==0)
    {
        //Koi bhi character uthalo doosre ka i.e s ka as v toh empty hai and we need min length.
        return 1;
    }
    if(answer[s.length()-1][v.length()-1]!=-1)
    {
        return answer[s.length()-1][v.length()-1];
    }
    //Recursive case
    //Not taking the first element in s
    int a=solve2(s.substr(1),v,answer);
    //Taking the first element in s
    int index=-1;
    for(int i=0;i<v.length();i++)
    {
        if(v[i]==s[0])
        {
            index=i;
            break;
        }
    }
    int b;
    if(index==-1)
    {
        //as ab first character is not in v so that only is the smallest subsequence 
        return 1;
    }
    else
    {
        //First char included so 1+
     b=1+solve2(s.substr(1),v.substr(index+1),answer);
    }
    answer[s.length()-1][v.length()-1]=min(a,b);
    return answer[s.length()-1][v.length()-1];
}
int solveHelp(string s,string v)
{
    int **answer=new int*[s.length()];
    for(int i=0;i<s.length();i++)
    {
        answer[i]=new int[v.length()];
        for(int j=0;j<v.length();j++)
        {
            answer[i][j]=-1;
        }
    }
    return solve2(s,v,answer);
}
int solve(string s,string v)
{
	// Write your code here.
    return solveHelp(s,v);
}
