#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int knapsackDp(int *weights,int *values,int n,int maxweight)
{
    int **answer=new int*[n];
    for(int i=0;i<n;i++)
    {
        answer[i]=new int[maxweight+1];
    }
    int i=0;
    for(int j=0;j<=maxweight;j++)
    {
        if(j<weights[0])
        {
            answer[i][j]=0;
        }
        else
        {
            //as ek element ek baar hi le sakte
        answer[i][j]=values[0];
        }
    }
    int j=0;
    for(i=0;i<n;i++)
    {
        answer[i][j]=0;
    }
    for(int i=1;i<n;i++)
    {
        for(int j=1;j<=maxweight;j++)
        {
            //get this logic from the recursion code see kahaa se kya call ho raha
            int b;
            //2 posiibilities include and not include
            int a=answer[i-1][j];
            if(weights[i]<=j)
            {
                //i-1 as ek element ek baar hi utha sakte
            b=values[i]+answer[i-1][j-weights[i]];
            }
            else
            {
                b=answer[i-1][j];
            }
            answer[i][j]=max(a,b);
        }
    }
    return answer[n-1][maxweight];
}
int main()
{
    int n,maxweight;
    cin>>n;
    int *weights=new int[n];
    int*values=new int[n];
    for(int i=0;i<n;i++)
    {
        cin>>weights[i];
    }
    for(int i=0;i<n;i++)
    {
        cin>>values[i];
    }
    cin>>maxweight;
  cout<<knapsackDp(weights,values,n,maxweight);
  
}

