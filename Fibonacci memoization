#include <iostream>
using namespace std;
int dp(int n)
{
    //dynamic programming
    int *ans=new int[n];
    ans[0]=0;
    ans[1]=1;
    for(int i=2;i<=n;i++)
    {
        ans[i]=ans[i-1]+ans[i-2];
    }
    return ans[n];
}
int fibo_better(int n,int *ans)
//Memoization
{
    if(n<=1)
    {
        ans[n]=n;
        return n;

    }
    if(ans[n]==0)
    {
        ans[n-1]=fibo_better(n-1,ans);
        ans[n-2]=fibo_better(n-2,ans);
        ans[n]=ans[n-1]+ans[n-2];
        return ans[n];
    }
    else
    {
        return ans[n];
    }
}
int fibo_helper(int n)
{
    //This function is just to make the array as in recursive function cannot make the array again and again (n+1) as zero bhi store karna tha.
    int *ans=new int[n+1];
    for(int i=0;i<=n;i++)
    {
        ans[i]=0;
    }
    fibo_better(n,ans);
}
//Brute force
int fibo(int n)
{
    if(n<=1)
    {
        return n;
    }
    return fibo(n-1)+fibo(n-2);
}
int main() 
{
    int n;
    cin>>n;
    cout<<fibo_helper(n)<<endl;
    cout<<dp(n);
}
