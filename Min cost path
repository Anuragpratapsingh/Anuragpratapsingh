//This method might be wrong see second method scroll down
int minCostPath(int **input, int m, int n) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
     int **dp=new int*[m];
     for(int i=0;i<n;i++)
     {
         dp[i]=new int[n];
     }
     int j=0;
     for(int i=0;i<m;i++)
     {
         dp[i][j]=input[i][j];
     }
     int i=0;
     for(int j=0;i<n;j++)
     {
         dp[i][j]=input[i][j];
     }
     for(int i=1;i<m;i++)
     {
         for(int j=1;j<n;j++)
         {
             dp[i][j]=input[i][j]+min(dp[i-1][j],min(dp[i-1][j-1],dp[i][j-1]));
         }
     }
     return dp[m-1][n-1];  
}
//  2nd method which is correct shayd
int minCOst_DP(int **input, int m, int n) {
	int **ans = new int*[m];
	for(int i = 0; i < m; i++) {
		ans[i] = new int[n];
	}

	ans[m-1][n-1] = input[m-1][n-1];

	// Last row
	for(int j = n - 2; j >= 0; j--) {
		ans[m-1][j] = input[m-1][j] + ans[m-1][j+1];
	}

	// Last col
	for(int i = m-2; i >= 0; i--) {
		ans[i][n-1] = input[i][n-1] + ans[i+1][n-1];
	}

	for(int i = m-2; i >= 0; i--) {
		for(int j = n-2; j >= 0; j--) {
			ans[i][j] = input[i][j] + min(ans[i][j+1], min(ans[i+1][j+1], ans[i+1][j]));
		}
	}
	return ans[0][0];
}

